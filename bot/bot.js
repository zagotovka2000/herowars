const TelegramBot = require('node-telegram-bot-api');
const UserService = require('./services/userService');
const HeroService = require('./services/heroService');
const BattleService = require('./services/battleService');

class GameBot extends TelegramBot {
  constructor(token, options, models) {
    super(token, options);
    this.models = models;
    this.userService = new UserService(models);
    this.heroService = new HeroService(models);
    this.battleService = new BattleService(models);
    
    this.initHandlers();
  }

  initHandlers() {
    this.onText(/\/start/, this.handleStart.bind(this));
    this.onText(/\/my_heroes/, this.handleMyHeroes.bind(this));
    this.onText(/\/create_team/, this.handleCreateTeam.bind(this));
    this.onText(/\/battle/, this.handleBattle.bind(this));
    this.onText(/\/upgrade_hero/, this.handleUpgradeHero.bind(this));
    
    // Web App –¥–∞–Ω–Ω—ã–µ
    this.on('web_app_data', this.handleWebAppData.bind(this));
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username || msg.from.first_name;

    try {
      let user = await this.userService.findOrCreate(telegramId, username);
      
      const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hero Wars Bot!

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:
üèÜ –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üí∞ –ó–æ–ª–æ—Ç–æ: ${user.gold}
üíé –°–∞–º–æ—Ü–≤–µ—Ç—ã: ${user.gems}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/heroes - –í–∞—à–∏ –≥–µ—Ä–æ–∏
/create_team - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
/battle - –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
/upgrade_hero - –£–ª—É—á—à–∏—Ç—å –≥–µ—Ä–æ—è

–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ Web App!
      `;

      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
            web_app: { url: `${process.env.WEB_APP_URL}/game` }
          }
        ]]
      };

      await this.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });

    } catch (error) {
      console.error('Start error:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleBattle(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const activeTeam = await this.models.Team.findOne({
        where: { userId: user.id, isActive: true },
        include: [{ model: this.models.Hero }]
      });

      if (!activeTeam || activeTeam.Heroes.length !== 5) {
        await this.sendMessage(chatId, 
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ 5 –≥–µ—Ä–æ–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_team'
        );
        return;
      }

      // –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      const opponent = await this.userService.findRandomOpponent(user.id);
      const opponentTeam = await this.models.Team.findOne({
        where: { userId: opponent.id, isActive: true },
        include: [{ model: this.models.Hero }]
      });

      await this.sendMessage(chatId, '‚öîÔ∏è –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...');

      const battleResult = await this.battleService.simulateBattle(activeTeam, opponentTeam);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã
      const battle = await this.models.Battle.create({
        player1Id: user.id,
        player2Id: opponent.id,
        winnerId: battleResult.winner === 'team1' ? user.id : 
                  battleResult.winner === 'team2' ? opponent.id : null,
        battleLog: battleResult.log,
        status: 'completed'
      });

      // –ù–∞–≥—Ä–∞–¥—ã
      if (battleResult.winner === 'team1') {
        await user.update({
          gold: user.gold + 100,
          experience: user.experience + 50
        });
      }

      await this.sendMessage(chatId, 
        `üìú –õ–æ–≥ –±–∏—Ç–≤—ã:\n\n${battleResult.log}\n\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${battleResult.winner === 'team1' ? '100 –∑–æ–ª–æ—Ç–∞ + 50 –æ–ø—ã—Ç–∞' : '0'}`
      );

    } catch (error) {
      console.error('Battle error:', error);
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤ –±–∏—Ç–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleWebAppData(msg) {
    const data = JSON.parse(msg.web_app_data.data);
    const chatId = msg.chat.id;
    
    switch (data.action) {
      case 'upgrade_hero':
        await this.handleWebAppUpgrade(chatId, data);
        break;
      case 'create_team':
        await this.handleWebAppTeam(chatId, data);
        break;
    }
  }

  async handleWebAppUpgrade(chatId, data) {
    try {
      const result = await this.heroService.upgradeHero(data.heroId, data.userId);
      await this.sendMessage(chatId, 
        `‚úÖ –ì–µ—Ä–æ–π —É–ª—É—á—à–µ–Ω!\n–£—Ä–æ–≤–µ–Ω—å: ${result.level}\n–ê—Ç–∞–∫–∞: ${result.attack}`
      );
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }
}

module.exports = GameBot;
