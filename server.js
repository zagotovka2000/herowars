const app = require('./app');
const express = require('express');
const path = require('path');
const db = require('./db/models');
const GameBot = require('./bot/bot');
const UserService = require('./bot/services/userService');
const HeroService = require('./bot/services/heroService');
const BattleService = require('./bot/services/battleService');

const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    console.log('üöÄ Starting Hero Wars Bot Server...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.authenticate();
    console.log('‚úÖ Database connection established');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ development)
    if (process.env.NODE_ENV !== 'production') {
      await db.sequelize.sync({ force: false });
      console.log('‚úÖ Database synchronized');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    const userService = new UserService(db);
    const heroService = new HeroService(db);
    const battleService = new BattleService(db);

    app.use(express.static(path.join(__dirname, 'webapp')));
    const apiRoutes = require('./routes/api')(db);
app.use('/api', apiRoutes);
app.get('/game', (req, res) => {
   res.sendFile(path.join(__dirname, 'webapp', 'game.html'));
 });
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    const botOptions = process.env.NODE_ENV === 'production' 
      ? { webHook: true }
      : { polling: true };

    const bot = new GameBot(process.env.BOT_TOKEN, botOptions, {
      models: db,
      userService,
      heroService,
      battleService
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤ production
    if (process.env.NODE_ENV === 'production') {
      const webhookUrl = `${process.env.WEBHOOK_DOMAIN}/webhook/${process.env.BOT_TOKEN}`;
      await bot.setWebhook(webhookUrl);
      console.log(`‚úÖ Webhook set to: ${webhookUrl}`);
    }

    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`‚úÖ Server running on port ${PORT}`);
      console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
      console.log(`üåê Environment: ${process.env.NODE_ENV}`);
      console.log('ü§ñ Hero Wars Bot is ready!');
    });

  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
const gracefulShutdown = async () => {
  console.log('\nüõë Shutting down gracefully...');
  process.exit(0);
};

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startServer();
