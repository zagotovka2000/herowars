require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { User, Hero, Team, TeamHero } = require('../db/models');
class GameBot extends TelegramBot {
  constructor(token, options, services) {
    console.log('ü§ñ Bot constructor called');
    
    if (!token) {
      throw new Error('BOT_TOKEN is required');
    }

    super(token, options);
    
    if (!services) {
      console.warn('‚ö†Ô∏è No services provided to bot');
      services = {};
    }
    
    this.models = services.models || {};
    this.userService = services.userService || null;
    this.heroService = services.heroService || null;
    this.battleService = services.battleService || null;
    this.webAppService = services.webAppService || null;
    
    console.log('‚úÖ Bot services initialized');
    
    this.bindAllMethods();
    this.initHandlers();
  }

 
  bindAllMethods() {
    try {
      const methodNames = Object.getOwnPropertyNames(Object.getPrototypeOf(this))
        .filter(name => name !== 'constructor' && typeof this[name] === 'function');
      
      methodNames.forEach(methodName => {
        this[methodName] = this[methodName].bind(this);
      });
      console.log(`‚úÖ Bound ${methodNames.length} methods`);
    } catch (error) {
      console.error('‚ùå Error binding methods:', error);
    }
  }

  initHandlers() {
    try {
      // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
      this.onText(/\/start/, this.handleStart);
      this.onText(/\/test/, this.handleTest);
      this.onText(/\/battle/, this.handleBattle);
      this.onText(/\/my_heroes/, this.handleMyHeroes);
      this.onText(/\/stats/, this.handleStats);
      this.onText(/\/buy_hero/, this.handleBuyHero);
      this.onText(/\/manage_team/, this.handleManageTeam);
      this.onText(/\/create_team/, this.handleCreateTeam);
      this.onText(/\/upgrade_hero/, this.handleUpgradeHero);
      this.onText(/\/fix_gold/, this.handleFixGold);
      this.onText(/\/sync_team/, this.handleSyncTeam);
      this.onText(/\/reset_team/, this.handleResetTeam);


      
      console.log('‚úÖ All handlers registered');
      
      // Callback queries
      this.on('callback_query', this.handleCallbackQuery);
      this.on('web_app_data', this.handleWebAppData);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      this.on('polling_error', (error) => {
        console.error('üî¥ Polling error:', error.message);
      });
      
      this.on('webhook_error', (error) => {
        console.error('üî¥ Webhook error:', error.message);
      });
      
    } catch (error) {
      console.error('‚ùå Error initializing handlers:', error);
    }
  }
  async handleSyncTeam(msg) {
   const chatId = msg.chat.id;
   const telegramId = msg.from.id;
 
   try {
     const syncResult = await this.userService.syncTeamData(telegramId);
     
     if (syncResult.success) {
       await this.sendMessage(chatId,
         `üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã:\n\n` +
         `üè∑Ô∏è ID –∫–æ–º–∞–Ω–¥—ã: ${syncResult.teamId}\n` +
         `üë• –ì–µ—Ä–æ–µ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: ${syncResult.heroesCount}\n\n` +
         `üìã –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n` +
         (syncResult.heroes.length > 0 ? 
           syncResult.heroes.map(h => `${h.position}. ${h.name} (ID: ${h.id})`).join('\n') :
           '‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤')
       );
     } else {
       await this.sendMessage(chatId, syncResult.message);
     }
   } catch (error) {
     console.error('Sync team error:', error);
     await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
   }
 }
 async handleResetTeam(msg) {
   const chatId = msg.chat.id;
   const telegramId = msg.from.id;
 
   try {
     const user = await this.userService.findByTelegramId(telegramId);
     const team = await this.models.Team.findOne({
       where: { userId: user.id, isActive: true }
     });
 
     if (!team) {
       await this.sendMessage(chatId, '‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
       return;
     }
 
     // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥—ã —Å –≥–µ—Ä–æ—è–º–∏
     await this.models.TeamHero.destroy({
       where: { teamId: team.id }
     });
 
     console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞:', { teamId: team.id });
 
     await this.sendMessage(chatId,
       `üîÑ –ö–æ–º–∞–Ω–¥–∞ "${team.name}" –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!\n\n` +
       `–í—Å–µ –≥–µ—Ä–æ–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã.\n` +
       `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ /manage_team`
     );
 
   } catch (error) {
     console.error('Reset team error:', error);
     await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
   }
 }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Web App
  isWebAppAvailable() {
    const hasDomain = process.env.WEBHOOK_DOMAIN && process.env.WEBHOOK_DOMAIN !== 'localhost:8100';
    const isHttps = hasDomain && process.env.WEBHOOK_DOMAIN.startsWith('https://');
    return hasDomain && isHttps;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Web App URL
  getWebAppUrl(path, telegramId) {
    if (!this.isWebAppAvailable()) {
      return null;
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–æ–º–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
    let domain = process.env.WEBHOOK_DOMAIN;
    if (!domain.startsWith('https://')) {
      domain = `https://${domain}`;
    }
    
    return `${domain}${path}?telegramId=${telegramId}`;
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username || msg.from.first_name;

    console.log(`üë§ Start command from ${username} (${telegramId})`);

    try {
      let user = null;
      
      if (this.userService) {
        user = await this.userService.findOrCreate(telegramId, username);
      }
      
      const message = user ? 
        `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n` +
        `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n` +
        `üí∞ –ó–æ–ª–æ—Ç–æ: ${user.gold}\n` +
        `üíé –ò–∑—É–º—Ä—É–¥—ã: ${user.gems}\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/test - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n` +
        `/battle - –ù–∞—á–∞—Ç—å –±–∏—Ç–≤—É\n` +
        `/my_heroes - –ú–æ–∏ –≥–µ—Ä–æ–∏\n` +
        `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
        `/buy_hero - –ö—É–ø–∏—Ç—å –≥–µ—Ä–æ—è\n` +
        `/manage_team - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π` :
        `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hero Wars Bot!\n\n` +
        `üîß –†–µ–∂–∏–º: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è\n` +
        `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web App
      const webAppUrl = this.getWebAppUrl('/webapp/team', telegramId);
      const keyboard = webAppUrl ? {
        inline_keyboard: [
          [
            {
              text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (Web App)',
              web_app: { url: webAppUrl }
            }
          ]
        ]
      } : undefined;

      await this.sendMessage(chatId, message, {
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Start error:', error);
      await this.sendMessage(chatId, 
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${error.message}\n\n` +
        `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞`
      );
    }
  }

  async handleTest(msg) {
    const chatId = msg.chat.id;
    
    try {
      const servicesStatus = {
        userService: !!this.userService,
        heroService: !!this.heroService,
        battleService: !!this.battleService,
        models: !!this.models
      };
      
      const webAppStatus = this.isWebAppAvailable() ? 
        `‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (${process.env.WEBHOOK_DOMAIN})` : 
        '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS)';
      
      await this.sendMessage(chatId, 
        `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
        `üïí –í—Ä–µ–º—è: ${new Date().toLocaleString()}\n` +
        `üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}\n` +
        `üåê Webhook: ${process.env.USE_WEBHOOK === 'true' ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}\n` +
        `üì± Web App: ${webAppStatus}\n` +
        `üèóÔ∏è –°–µ—Ä–≤–∏—Å—ã: ${Object.values(servicesStatus).filter(Boolean).length}/${Object.values(servicesStatus).length}\n` +
        `üí° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`
      );
    } catch (error) {
      console.error('Test command error:', error);
      await this.sendMessage(chatId, 
        `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`
      );
    }
  }

  async handleBattle(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    console.log(`‚öîÔ∏è Battle command from ${telegramId}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
      if (!this.userService || !this.battleService) {
        throw new Error('–°–µ—Ä–≤–∏—Å—ã –±–∏—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      const user = await this.userService.findByTelegramId(telegramId);
      console.log(`üë§ User found: ${user.username}`);

      const activeTeam = await this.models.Team.findOne({
        where: { userId: user.id, isActive: true },
        include: [{ model: this.models.Hero }]
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Heroes
      if (!activeTeam || !activeTeam.Heroes || activeTeam.Heroes.length !== 5) {
        await this.sendMessage(chatId, 
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ 5 –≥–µ—Ä–æ–µ–≤!\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
          '/create_team - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n' +
          '/buy_hero - –∫—É–ø–∏—Ç—å –≥–µ—Ä–æ–µ–≤\n' +
          '/manage_team - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π'
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web App –¥–ª—è –±–∏—Ç–≤—ã
      const webAppUrl = this.getWebAppUrl('/webapp/battle', telegramId);
      
      if (webAppUrl) {
        // Web App –≤–µ—Ä—Å–∏—è
        await this.sendMessage(chatId, 
          `‚öîÔ∏è –ë–∏—Ç–≤–∞ –≤ Web App!\n\n` +
          `–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞:\n` +
          `${activeTeam.Heroes.map((h, i) => `${i + 1}. ${h.name} (${h.heroClass})`).join('\n')}\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –±–∏—Ç–≤—ã!`,
          {
            reply_markup: {
              inline_keyboard: [[
                {
                  text: '‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–∏—Ç–≤—É –≤ Web App',
                  web_app: { url: webAppUrl }
                }
              ]]
            }
          }
        );
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–∏—Ç–≤—ã
        await this.sendMessage(chatId, '‚öîÔ∏è –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...');

        const opponent = await this.userService.findRandomOpponent(user.id);
        const opponentTeam = await this.models.Team.findOne({
          where: { userId: opponent.id, isActive: true },
          include: [{ model: this.models.Hero }]
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º opponentTeam –∏ –µ–≥–æ Heroes
        if (!opponentTeam || !opponentTeam.Heroes || opponentTeam.Heroes.length !== 5) {
          await this.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.');
          return;
        }

        console.log(`üéØ Starting battle: ${user.username} vs ${opponent.username}`);

        const battleResult = await this.battleService.simulateBattle(activeTeam, opponentTeam);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã
        await this.models.Battle.create({
          player1Id: user.id,
          player2Id: opponent.id,
          winnerId: battleResult.winner === 'team1' ? user.id : 
                    battleResult.winner === 'team2' ? opponent.id : null,
          battleLog: battleResult.log,
          status: 'completed'
        });

        // –ù–∞–≥—Ä–∞–¥—ã
        let rewardMessage = '';
        if (battleResult.winner === 'team1') {
          await this.userService.updateUserResources(user.id, {
            gold: 100,
            experience: 50
          });
          rewardMessage = '\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: 100 –∑–æ–ª–æ—Ç–∞ + 50 –æ–ø—ã—Ç–∞';
        } else if (battleResult.winner === 'team2') {
          await this.userService.updateUserResources(user.id, {
            gold: 20,
            experience: 20
          });
          rewardMessage = '\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ: 20 –∑–æ–ª–æ—Ç–∞ + 20 –æ–ø—ã—Ç–∞';
        } else {
          await this.userService.updateUserResources(user.id, {
            gold: 50,
            experience: 30
          });
          rewardMessage = '\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–∏—á—å—é: 50 –∑–æ–ª–æ—Ç–∞ + 30 –æ–ø—ã—Ç–∞';
        }

        await this.sendMessage(chatId, 
          `üìú –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã:\n\n${battleResult.log}${rewardMessage}`
        );

        console.log(`‚úÖ Battle completed for ${user.username}`);
      }

    } catch (error) {
      console.error('üî¥ Battle error details:', {
        message: error.message,
        stack: error.stack,
        telegramId: telegramId
      });
      
      await this.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –≤ –±–∏—Ç–≤–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n' +
        '‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ—Ä–æ–µ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ\n' +
        '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n' +
        '‚Ä¢ –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö\n\n' +
        'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
        '/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞\n' +
        '/create_team - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n' +
        '/fix_gold - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
      );
    }
  }

  async handleMyHeroes(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      if (!this.userService || !this.heroService) {
        throw new Error('–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      const user = await this.userService.findByTelegramId(telegramId);
      const heroes = await this.heroService.getUserHeroes(user.id);

      if (!heroes || heroes.length === 0) {
        await this.sendMessage(chatId, 
          '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤.\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_hero —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≥–µ—Ä–æ—è!'
        );
        return;
      }

      let message = 'üéØ –í–∞—à–∏ –≥–µ—Ä–æ–∏:\n\n';
      heroes.forEach((hero, index) => {
        message += `${index + 1}. ${hero.name} (${hero.heroClass})\n`;
        message += `   –£—Ä. ${hero.level} | ‚ù§Ô∏è ${hero.health} | ‚öîÔ∏è ${hero.attack}\n`;
        message += `   üõ°Ô∏è ${hero.defense} | üèÉ ${hero.speed}\n\n`;
      });

      message += `üí° –í—Å–µ–≥–æ –≥–µ—Ä–æ–µ–≤: ${heroes.length}`;

      await this.sendMessage(chatId, message);

    } catch (error) {
      console.error('MyHeroes error:', error);
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤.');
    }
  }

  async handleStats(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
  
    try {
      if (!this.userService) {
        throw new Error('–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      const user = await this.userService.findByTelegramId(telegramId);
      const stats = await this.userService.getUserStats(user.id);

      const message = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üèÜ –£—Ä–æ–≤–µ–Ω—å: ${stats.user.level}
‚≠ê –û–ø—ã—Ç: ${stats.user.experience}/${stats.user.level * 100}
üí∞ –ó–æ–ª–æ—Ç–æ: ${stats.user.gold}
üíé –°–∞–º–æ—Ü–≤–µ—Ç—ã: ${stats.user.gems}

üéØ –ì–µ—Ä–æ–µ–≤: ${stats.heroesCount}
‚öîÔ∏è –ë–æ—ë–≤: ${stats.battlesCount}
üèÖ –ü–æ–±–µ–¥: ${stats.winsCount}
üìà Win Rate: ${stats.winRate}%
      `;

      await this.sendMessage(chatId, message);

    } catch (error) {
      console.error('Stats error:', error);
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  async handleBuyHero(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const result = await this.heroService.createRandomHero(user.id, 500);

      await this.sendMessage(chatId,
        `‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è!\n\n` +
        `üéØ –ò–º—è: ${result.hero.name}\n` +
        `‚öîÔ∏è –ö–ª–∞—Å—Å: ${result.hero.heroClass}\n` +
        `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${result.hero.health}\n` +
        `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${result.hero.attack}\n` +
        `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${result.hero.defense}\n` +
        `üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${result.hero.speed}\n\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.cost} –∑–æ–ª–æ—Ç–∞\n` +
        `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞: ${result.newGold}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_team —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –≤ –∫–æ–º–∞–Ω–¥—É`
      );

    } catch (error) {
      console.error('BuyHero error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async handleManageTeam(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web App
      const webAppUrl = this.getWebAppUrl('/webapp/team', telegramId);
      
      if (webAppUrl) {
        // Web App –≤–µ—Ä—Å–∏—è
        await this.sendMessage(chatId, 
          `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –≤ Web App!\n\n` +
          `–í Web App –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
          `‚Ä¢ üìã –í–∏–¥–µ—Ç—å –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤\n` +
          `‚Ä¢ üéØ –í—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n` +
          `‚Ä¢ üîÑ –ú–µ–Ω—è—Ç—å —Å–æ—Å—Ç–∞–≤\n` +
          `‚Ä¢ ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
          {
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üéØ –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π',
                  web_app: { url: webAppUrl }
                }
              ]]
            }
          }
        );
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        const teamInfo = await this.userService.getTeamManagementInfo(telegramId);
        
        let message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n\n`;
        
        if (teamInfo.activeTeam) {
          message += `üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${teamInfo.activeTeam.name}\n`;
          message += `üìç –°–ª–æ—Ç–æ–≤: ${teamInfo.teamHeroes ? teamInfo.teamHeroes.length : 0}/5\n\n`;
          
          if (teamInfo.teamHeroes && teamInfo.teamHeroes.length > 0) {
            message += `üî∑ –ì–µ—Ä–æ–∏ –≤ –∫–æ–º–∞–Ω–¥–µ:\n`;
            teamInfo.teamHeroes.forEach(hero => {
              message += `${hero.TeamHero.position}. ${hero.name} (—É—Ä. ${hero.level})\n`;
            });
          } else {
            message += `‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤\n`;
          }
        } else {
          message += `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã\n`;
        }
        
        message += `\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ—Ä–æ–∏: ${teamInfo.allHeroes ? teamInfo.allHeroes.length : 0}\n`;
        
        if (teamInfo.allHeroes) {
          teamInfo.allHeroes.forEach((hero, index) => {
            const inTeam = teamInfo.teamHeroes && teamInfo.teamHeroes.some(th => th.id === hero.id);
            const status = inTeam ? '‚úÖ –í –∫–æ–º–∞–Ω–¥–µ' : '‚ùå –ù–µ –≤ –∫–æ–º–∞–Ω–¥–µ';
            message += `${index + 1}. ${hero.name} (${hero.heroClass}) - ${status}\n`;
          });
        }

        const keyboard = {
          inline_keyboard: [
            [
              { text: 'üõí –ö—É–ø–∏—Ç—å –≥–µ—Ä–æ—è (500 –∑–æ–ª–æ—Ç–∞)', callback_data: 'buy_hero' }
            ],
            [
              { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è', callback_data: 'add_hero_menu' },
              { text: '‚ûñ –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã', callback_data: 'remove_hero_menu' }
            ],
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_team' }
            ]
          ]
        };

        await this.sendMessage(chatId, message, {
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('ManageTeam error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async handleCreateTeam(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const heroes = await this.heroService.getUserHeroes(user.id);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ heroes
      if (!heroes || heroes.length < 5) {
        await this.sendMessage(chatId, 
          `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n\n` +
          `–ù—É–∂–Ω–æ: 5 –≥–µ—Ä–æ–µ–≤\n` +
          `–£ –≤–∞—Å: ${heroes ? heroes.length : 0} –≥–µ—Ä–æ–µ–≤\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_hero —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≥–µ—Ä–æ–µ–≤`
        );
        return;
      }

      const team = await this.models.Team.create({
        name: `–ö–æ–º–∞–Ω–¥–∞ ${user.username}`,
        isActive: true,
        userId: user.id
      });

      await this.models.Team.update(
        { isActive: false },
        { 
          where: { 
            userId: user.id,
            id: { [this.models.Sequelize.Op.ne]: team.id }
          }
        }
      );

      for (let i = 0; i < 5; i++) {
        await this.heroService.addHeroToTeam(heroes[i].id, team.id, i + 1);
      }

      await this.sendMessage(chatId, 
        `‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `–í –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n` +
        `${heroes.slice(0, 5).map((h, i) => `${i + 1}. ${h.name} (${h.heroClass})`).join('\n')}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_team –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã`
      );

    } catch (error) {
      console.error('CreateTeam error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async handleUpgradeHero(msg) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const heroes = await this.heroService.getUserHeroes(user.id);

      if (!heroes || heroes.length === 0) {
        await this.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.');
        return;
      }

      const keyboard = {
        inline_keyboard: heroes.map(hero => [
          {
            text: `${hero.name} (–£—Ä. ${hero.level}) - ${hero.level * 100} –∑–æ–ª–æ—Ç–∞`,
            callback_data: `upgrade_hero_${hero.id}`
          }
        ])
      };

      await this.sendMessage(chatId, 
        'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:', 
        { reply_markup: keyboard }
      );

    } catch (error) {
      console.error('UpgradeHero error:', error);
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –≥–µ—Ä–æ—è.');
    }
  }

  async handleCallbackQuery(callbackQuery) {
   const chatId = callbackQuery.message.chat.id;
   const data = callbackQuery.data;
   const user = await this.userService.findByTelegramId(callbackQuery.from.id);

   console.log(`üîò Callback: ${data} from ${callbackQuery.from.id}`);

   try {
     if (data.startsWith('upgrade_hero_')) {
       const heroId = data.replace('upgrade_hero_', '');
       
       const result = await this.heroService.upgradeHero(heroId, user.id);
       
       await this.sendMessage(chatId, 
         `‚úÖ –ì–µ—Ä–æ–π ${result.hero.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${result.hero.level}!\n` +
         `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: +${result.increases.health}\n` +
         `‚öîÔ∏è –ê—Ç–∞–∫–∞: +${result.increases.attack}\n` +
         `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +${result.increases.defense}\n` +
         `üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: +${result.increases.speed}\n` +
         `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.upgradeCost} –∑–æ–ª–æ—Ç–∞`
       );

       await this.answerCallbackQuery(callbackQuery.id, {
         text: '–ì–µ—Ä–æ–π —É–ª—É—á—à–µ–Ω!'
       });
     }
     else if (data === 'buy_hero') {
       const result = await this.heroService.createRandomHero(user.id, 500);

       await this.sendMessage(chatId,
         `‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è!\n\n` +
         `üéØ –ò–º—è: ${result.hero.name}\n` +
         `‚öîÔ∏è –ö–ª–∞—Å—Å: ${result.hero.heroClass}\n` +
         `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${result.hero.health}\n` +
         `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${result.hero.attack}\n` +
         `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${result.hero.defense}\n` +
         `üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${result.hero.speed}\n\n` +
         `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.cost} –∑–æ–ª–æ—Ç–∞\n` +
         `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞: ${result.newGold}`
       );

       await this.answerCallbackQuery(callbackQuery.id, {
         text: '–ì–µ—Ä–æ–π –∫—É–ø–ª–µ–Ω!'
       });
     }
     else if (data === 'refresh_team') {
       await this.handleManageTeam({ chat: { id: chatId }, from: callbackQuery.from });
       await this.answerCallbackQuery(callbackQuery.id, {
         text: '–û–±–Ω–æ–≤–ª–µ–Ω–æ!'
       });
     }
     else if (data === 'add_hero_menu') {
       await this.showAddHeroMenu(chatId, callbackQuery.from.id);
       await this.answerCallbackQuery(callbackQuery.id);
     }
     // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ù–ê –¢–û–ú –ñ–ï –£–†–û–í–ù–ï, –ß–¢–û –ò –î–†–£–ì–ò–ï –£–°–õ–û–í–ò–Ø
     else if (data.startsWith('add_hero_')) {
       const heroId = data.split('_')[2];
       await this.addHeroToTeam(callbackQuery, user, heroId);
     }
     // –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ù–ê –¢–û–ú –ñ–ï –£–†–û–í–ù–ï
     else if (data.startsWith('remove_hero_')) {
       const heroId = data.split('_')[2];
       await this.removeHeroFromTeam(callbackQuery, user, heroId);
     }
     // –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≥–µ—Ä–æ—è - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ù–ê –¢–û–ú –ñ–ï –£–†–û–í–ù–ï
     else if (data === 'remove_hero_menu') {
       await this.showRemoveHeroMenu(callbackQuery, user);
     }
     // –°–±—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã
     else if (data === 'reset_team') {
       await this.handleResetTeam({ chat: { id: chatId }, from: callbackQuery.from });
       await this.answerCallbackQuery(callbackQuery.id, {
         text: '–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞!'
       });
     }
     // –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
     else if (data === 'back_to_main') {
       await this.showMainMenu(chatId, user);
       await this.answerCallbackQuery(callbackQuery.id);
     }
     // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
     else if (data === 'team_management') {
       await this.handleManageTeam({ chat: { id: chatId }, from: callbackQuery.from });
       await this.answerCallbackQuery(callbackQuery.id);
     }

   } catch (error) {
     console.error('Callback query error:', error);
     await this.sendMessage(chatId, `‚ùå ${error.message}`);
     await this.answerCallbackQuery(callbackQuery.id, {
       text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
     });
   }
 }

  async showAddHeroMenu(chatId, telegramId) {
    try {
      const teamInfo = await this.userService.getTeamManagementInfo(telegramId);
      
      if (!teamInfo.activeTeam) {
        await this.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é /create_team');
        return;
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º teamHeroes
      if (teamInfo.teamHeroes && teamInfo.teamHeroes.length >= 5) {
        await this.sendMessage(chatId, '‚ùå –í –∫–æ–º–∞–Ω–¥–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ (5)');
        return;
      }

      const availableHeroes = teamInfo.allHeroes ? 
        teamInfo.allHeroes.filter(hero => 
          !teamInfo.teamHeroes || !teamInfo.teamHeroes.some(th => th.id === hero.id)
        ) : [];

      if (!availableHeroes || availableHeroes.length === 0) {
        await this.sendMessage(chatId, 
          '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É.\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_hero —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤!'
        );
        return;
      }

      const keyboard = {
        inline_keyboard: availableHeroes.map(hero => [
          {
            text: `${hero.name} (${hero.heroClass}) - —É—Ä. ${hero.level}`,
            callback_data: `add_hero_${hero.id}`
          }
        ])
      };

      const currentCount = teamInfo.teamHeroes ? teamInfo.teamHeroes.length : 0;
      await this.sendMessage(chatId, 
        `–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É (—Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${5 - currentCount}):`,
        { reply_markup: keyboard }
      );

    } catch (error) {
      console.error('ShowAddHeroMenu error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async showRemoveHeroMenu(chatId, telegramId) {
    try {
      const teamInfo = await this.userService.getTeamManagementInfo(telegramId);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º teamHeroes
      if (!teamInfo.activeTeam || !teamInfo.teamHeroes || teamInfo.teamHeroes.length === 0) {
        await this.sendMessage(chatId, '‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }

      const keyboard = {
        inline_keyboard: teamInfo.teamHeroes.map(hero => [
          {
            text: `${hero.TeamHero.position}. ${hero.name} (${hero.heroClass})`,
            callback_data: `remove_hero_${hero.id}`
          }
        ])
      };

      await this.sendMessage(chatId, 
        '–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã:',
        { reply_markup: keyboard }
      );

    } catch (error) {
      console.error('ShowRemoveHeroMenu error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }
  async showTeamManagement(ctx, user) {
   try {
     const teamInfo = await this.userService.getTeamManagementInfo(user.id);
     
     console.log('üîç DEBUG TeamManagementInfo for display:', teamInfo);
     
     let message = `üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π\n\n`;
     
     // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     message += `üë• –ì–µ—Ä–æ–∏ –≤ –∫–æ–º–∞–Ω–¥–µ (${teamInfo.heroesCount}/5):\n\n`;
     
     if (teamInfo.heroesCount === 0) {
       message += `‚ùå –í –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤.\n`;
     } else {
       teamInfo.heroes.forEach((hero, index) => {
         message += `${index + 1}. ${hero.name} (${hero.heroClass})\n`;
         message += `   ‚öîÔ∏è –ê—Ç–∞–∫–∞: ${hero.attack} ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${hero.health}\n`;
         message += `   üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${hero.defense} üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${hero.speed}\n\n`;
       });
     }
     
     const keyboard = [];
     
     // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
     if (teamInfo.heroesCount < 5) {
       keyboard.push([{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è', callback_data: 'add_hero_menu' }]);
     }
     
     if (teamInfo.heroesCount > 0) {
       keyboard.push([{ text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –≥–µ—Ä–æ—è', callback_data: 'remove_hero_menu' }]);
     }
     
     keyboard.push([{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_team' }]);
     keyboard.push([{ text: 'üéØ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data: 'reset_team' }]);
     keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
     
     if (ctx.updateType === 'callback_query') {
       await ctx.editMessageText(message, { 
         reply_markup: { inline_keyboard: keyboard },
         parse_mode: 'Markdown'
       });
     } else {
       await ctx.reply(message, {
         reply_markup: { inline_keyboard: keyboard },
         parse_mode: 'Markdown'
       });
     }
   } catch (error) {
     console.error('Error showing team management:', error);
     await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥—ã');
   }
 }
 async addHeroToTeam(callbackQuery, user, heroId) {
   try {
     const chatId = callbackQuery.message.chat.id;
     console.log('üîç DEBUG: Adding hero to team:', { userId: user.id, heroId });
     
     const result = await this.userService.addHeroToTeam(user.id, heroId);
     
     if (result.success) {
       // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π
       await this.handleManageTeam({ 
         chat: { id: chatId }, 
         from: { id: user.telegramId } 
       });
       await this.answerCallbackQuery(callbackQuery.id, {
         text: '–ì–µ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!'
       });
     } else {
       await this.answerCallbackQuery(callbackQuery.id, { 
         text: result.message || '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è',
         show_alert: true 
       });
     }
   } catch (error) {
     console.error('AddHeroToTeam error:', error);
     await this.answerCallbackQuery(callbackQuery.id, { 
       text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ—è',
       show_alert: true 
     });
   }
 }
 
 async showRemoveHeroMenu(callbackQuery, user) {
   try {
     const chatId = callbackQuery.message.chat.id;
     const teamInfo = await this.userService.getTeamManagementInfo(user.id);
     
     if (teamInfo.heroesCount === 0) {
       await this.answerCallbackQuery(callbackQuery.id, { 
         text: '‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
         show_alert: true 
       });
       return;
     }
     
     let message = `‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã\n\n`;
     message += `–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;
     
     const keyboard = [];
     
     teamInfo.heroes.forEach(hero => {
       keyboard.push([{
         text: `${hero.name} (${hero.heroClass}) - –ü–æ–∑–∏—Ü–∏—è ${hero.position}`,
         callback_data: `remove_hero_${hero.id}`
       }]);
     });
     
     keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'team_management' }]);
     
     await this.editMessageText(chatId, callbackQuery.message.message_id, message, {
       reply_markup: { inline_keyboard: keyboard }
     });
     
     await this.answerCallbackQuery(callbackQuery.id);
   } catch (error) {
     console.error('Error showing remove hero menu:', error);
     await this.answerCallbackQuery(callbackQuery.id, { 
       text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è',
       show_alert: true 
     });
   }
 }
 async removeHeroFromTeam(callbackQuery, user, heroId) {
   try {
     const result = await this.userService.removeHeroFromTeam(user.id, heroId);
     
     if (result.success) {
       // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π
       await this.handleManageTeam({ 
         chat: { id: callbackQuery.message.chat.id }, 
         from: { id: user.telegramId } 
       });
       await this.answerCallbackQuery(callbackQuery.id, {
         text: result.message
       });
     } else {
       await this.answerCallbackQuery(callbackQuery.id, { 
         text: result.message,
         show_alert: true 
       });
     }
   } catch (error) {
     console.error('RemoveHeroFromTeam error:', error);
     await this.answerCallbackQuery(callbackQuery.id, { 
       text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–µ—Ä–æ—è',
       show_alert: true 
     });
   }
 }
 
 
 async showRemoveHeroMenu(ctx, user) {
   try {
     const teamInfo = await this.userService.getTeamManagementInfo(user.id);
     
     if (teamInfo.heroesCount === 0) {
       await ctx.answerCallbackQuery({ 
         text: '‚ùå –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
         show_alert: true 
       });
       return;
     }
     
     let message = `‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã\n\n`;
     message += `–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;
     
     const keyboard = [];
     
     teamInfo.heroes.forEach(hero => {
       keyboard.push([{
         text: `${hero.name} (${hero.heroClass}) - –ü–æ–∑–∏—Ü–∏—è ${hero.position}`,
         callback_data: `remove_hero_${hero.id}`
       }]);
     });
     
     keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'team_management' }]);
     
     await ctx.editMessageText(message, {
       reply_markup: { inline_keyboard: keyboard }
     });
   } catch (error) {
     console.error('Error showing remove hero menu:', error);
     await ctx.answerCallbackQuery({ 
       text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è',
       show_alert: true 
     });
   }
 }
 
  async handleWebAppData(msg) {
    const data = JSON.parse(msg.web_app_data.data);
    const chatId = msg.chat.id;
    
    try {
      switch (data.action) {
        case 'upgrade_hero':
          await this.handleWebAppUpgrade(chatId, data);
          break;
        case 'create_team':
          await this.handleWebAppTeamCreation(chatId, data);
          break;
        default:
          await this.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
      }
    } catch (error) {
      console.error('WebApp data error:', error);
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async handleWebAppUpgrade(chatId, data) {
    try {
      const result = await this.heroService.upgradeHero(data.heroId, data.userId);
      await this.sendMessage(chatId, 
        `‚úÖ –ì–µ—Ä–æ–π ${result.hero.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${result.hero.level}!\n` +
        `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: +${result.increases.health}\n` +
        `‚öîÔ∏è –ê—Ç–∞–∫–∞: +${result.increases.attack}\n` +
        `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +${result.increases.defense}\n` +
        `üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: +${result.increases.speed}\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.upgradeCost} –∑–æ–ª–æ—Ç–∞`
      );
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå ${error.message}`);
    }
  }

  async handleWebAppTeamCreation(chatId, data) {
    await this.sendMessage(chatId, '‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Web App!');
  }

  async handleFixGold(msg) {
   const chatId = msg.chat.id;
   const telegramId = msg.from.id;
 
   try {
     const user = await this.userService.findByTelegramId(telegramId);
     
     if (user.gold < 5000) {
       const goldToAdd = 5000 - user.gold;
       await user.update({ gold: 5000 });
       
       await this.sendMessage(chatId,
         `üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n\n` +
         `üí∞ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${goldToAdd} –∑–æ–ª–æ—Ç–∞\n` +
         `üí≥ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: 5000 –∑–æ–ª–æ—Ç–∞\n\n` +
         `üéÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –≥–µ—Ä–æ–µ–≤!`
       );
     } else {
       await this.sendMessage(chatId,
         `‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –ø–æ—Ä—è–¥–∫–µ!\n` +
         `üí≥ –£ –≤–∞—Å: ${user.gold} –∑–æ–ª–æ—Ç–∞`
       );
     }
 
   } catch (error) {
     console.error('Fix gold error:', error);
     await this.sendMessage(chatId, `‚ùå ${error.message}`);
   }
 }
}

module.exports = GameBot;
